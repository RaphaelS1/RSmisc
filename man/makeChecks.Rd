% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeChecks.R
\name{makeChecks}
\alias{makeChecks}
\title{Automatic Generation of Validaton Functions}
\usage{
makeChecks(assertionName, cond, errormsg, args = alist(x=),
  pos = -1)
}
\arguments{
\item{assertionName}{name that follows assert/check/test/is}

\item{cond}{Boolean condition to check}

\item{errormsg}{Error message to produce}

\item{args}{Generic argument names for object to validate. See Details.}

\item{pos}{Environment position to assign functions to. See Details.}
}
\description{
This function uses the generalised assertion functions to assign assert/check/test/is
functions to the given environment for quick deployment of validation checks. See examples
for how it is used in distr6.
}
\details{
This generates simplified version of more complex assertion and validation
  functions that can be found in libraries such as \code{\link{checkmate}}. The purpose
  of which is to easily define validation checks that are used throughout distr6.

  By default, validations are only made in relation to one argument however this can be
   extended by adding arguments to the \code{args} parameter. For example, \code{args = alist(x=, y=,...)}.
   Validation functions are assigned to the current parent environment, which is often .GlobalEnv
   however when loading and attaching libraries, it is the current library being loaded.
}
\examples{
 makeChecks(assertionName = "Numeric",
     cond = inherits(x,"numeric"),
     errormsg = paste(x,"is not numeric"), pos = 1)
 assertNumeric(as.numeric(0)) # silent
 checkNumeric(as.numeric(1)) # TRUE
 testNumeric("a") # FALSE
 isNumeric("2") # FALSE

}
